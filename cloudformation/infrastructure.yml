Parameters:

    # Parameters for AWS CodePipeline 

    ApplicationName:
        Type: String

    EnvironmentName:
        Type: String

    ArtifactS3Bucket:
        Type: String

    InstanceType:
        Description: The instance type to deploy to
        Type: String
        Default: t2.micro

    InstanceCount: 
        Description: How many instances should the AutoScaling Group contain
        Type: Number
        Default: 2

    DeploymentStrategy:
        Description: The CodeDeploy deployment strategy to user
        Type: String
        Default: CodeDeployDefault.OneAtATime

    VpcCIDR: 
        Description: Please enter the IP range (CIDR notation) for this VPC
        Type: String
        Default: 10.142.192.0/22

    PublicSubnet1CIDR:
        Description: Please enter the CIDR IP range for the public subnet in the first Availability Zone
        Type: String
        Default: 10.142.195.0/26

    PublicSubnet2CIDR:
        Description: Please enter the CIDR IP range for the public subnet in the second Availability Zone
        Type: String
        Default: 10.142.195.64/26
    
    PublicSubnet3CIDR:
        Description: Please enter the CIDR IP range for the public subnet in the third Availability Zone
        Type: String
        Default: 10.142.195.128/26

    PrivateSubnet1CIDR:
        Description: Please enter the CIDR IP range for the private subnet in the first Availability Zone
        Type: String
        Default: 10.142.192.0/25

    PrivateSubnet2CIDR:
        Description: Please enter the CIDR IP range for the private subnet in the second Availability Zone
        Type: String
        Default: 10.142.192.128/25

    PrivateSubnet3CIDR:
        Description: Please enter the CIDR IP range for the private subnet in the third Availability Zone
        Type: String
        Default: 10.142.193.0/25
Mappings:

    # Amazon Linux AMI 2018.03 release: https://aws.amazon.com/amazon-linux-ami/

    AWSRegionToAMI:
        us-east-1: #US East (N. Virginia)
            AMI: ami-0ff8a91507f77f867
        us-east-2: #US East (Ohio)
            AMI: ami-0b59bfac6be064b78
        us-west-1: #US West (N. California)
            AMI: ami-0bdb828fd58c52235
        us-west-2: #US West (Oregon)
            AMI: ami-a0cfeed8
        ca-central-1: #Canada (Central)
            AMI: ami-0b18956f
        eu-central-1: #EU (Frankfurt)
            AMI: ami-0233214e13e500f77
        eu-west-1: #EU (Ireland)
            AMI: ami-047bb4163c506cd98
        eu-west-2: #EU (London)
            AMI: ami-f976839e
        eu-west-3: #EU (Paris)
            AMI: ami-0ebc281c20e89ba4b
        ap-northeast-1: #Asia Pacific (Tokyo)
            AMI: ami-06cd52961ce9f0d85
        ap-northeast-2: #Asia Pacific (Seoul)
            AMI: ami-0a10b2721688ce9d2
        ap-southeast-1: #Asia Pacific (Singapore)
            AMI: ami-08569b978cc4dfa10
        ap-southeast-2: #Asia Pacific (Sydney)
            AMI: ami-09b42976632b27e9b
        ap-south-1: #Asia Pacific (Mumbai)
            AMI: ami-0912f71e06545ad88
        sa-east-1: #South America (SÃ£o Paulo)
            AMI: ami-07b14488da8ea02a0
    
    # CodeDeploy installer bucket list sourced from:
        
    CodeDeployInstallerBuckets:
        us-east-1:
            Bucket: aws-codedeploy-us-east-1
        us-east-2:
            Bucket: aws-codedeploy-us-east-2
        us-west-1:
            Bucket: aws-codedeploy-us-west-1
        us-west-2:
            Bucket: aws-codedeploy-us-west-2
        ca-central-1:
            Bucket: aws-codedeploy-ca-central-1
        eu-central-1:
            Bucket: aws-codedeploy-eu-central-1
        eu-west-1:
            Bucket: aws-codedeploy-eu-west-1
        eu-west-2:
            Bucket: aws-codedeploy-eu-west-2
        eu-west-3:
            Bucket: aws-codedeploy-eu-west-3
        ap-northeast-1:
            Bucket: aws-codedeploy-ap-northeast-1
        ap-northeast-2:
            Bucket: aws-codedeploy-ap-northeast-2
        ap-southeast-1:
            Bucket: aws-codedeploy-ap-southeast-1
        ap-southeast-2:
            Bucket: aws-codedeploy-ap-southeast-2
        ap-south-1:
            Bucket: aws-codedeploy-ap-south-1
        sa-east-1:
            Bucket: aws-codedeploy-sa-east-1


Resources:

    AutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties: 
            VPCZoneIdentifier: 
                - !Ref PrivateSubnet1
                - !Ref PrivateSubnet2
                - !Ref PrivateSubnet3 
            LaunchConfigurationName: !Ref LaunchConfiguration
            TargetGroupARNs: 
                - !Ref TargetGroup
            MinSize: !Ref InstanceCount
            MaxSize: !Ref InstanceCount
            DesiredCapacity: !Ref InstanceCount
            Tags: 
                - Key: Name
                  Value: !Sub ${ApplicationName}-${EnvironmentName}
                  PropagateAtLaunch: true
        CreationPolicy:
            ResourceSignal: 
                Timeout: PT15M
        UpdatePolicy:
            AutoScalingRollingUpdate:
                MinInstancesInService: 1
                MaxBatchSize: 1
                PauseTime: PT15M
                WaitOnResourceSignals: true
        
    LaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            ImageId:  !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
            InstanceType: !Ref InstanceType
            IamInstanceProfile: !Ref InstanceProfile
            SecurityGroups: 
                - !Ref ApplicationSecurityGroup
            UserData: !
                "Fn::Base64": !Sub 
                    - |+
                        #!/bin/bash

                        # Set up a CloudFormation wait signal, so we can notify when the CodeDeploy agent is running
                        yum install -y aws-cfn-bootstrap
                        /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
                        
                        # Install CodeDeploy agent
                        yum -y update
                        yum install -y ruby
                        cd /home/ec2-user
                        curl -O https://${InstallerBucket}.s3.amazonaws.com/latest/install
                        chmod +x ./install
                        ./install auto

                        # Send a success/failure signal to CloudFormation based on the exit status of the last command
                        /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup
                    - InstallerBucket:
                        Fn::FindInMap: [ CodeDeployInstallerBuckets, !Ref "AWS::Region", Bucket]

    LoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Name: !Sub ${ApplicationName}-${EnvironmentName}
            Subnets: 
                - !Ref PublicSubnet1
                - !Ref PublicSubnet2
                - !Ref PublicSubnet3
            SecurityGroups: 
                - !Ref LoadBalancerSecurityGroup
            Tags: 
                - Key: Name
                  Value: !Sub ${ApplicationName}-${EnvironmentName}

    LoadBalancerListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            LoadBalancerArn: !Ref LoadBalancer
            Port: 80
            Protocol: HTTP 
            DefaultActions: 
                - Type: forward
                  TargetGroupArn: !Ref TargetGroup

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            Name: !Sub ${ApplicationName}-${EnvironmentName}
            VpcId: !Ref VPC
            Port: 8080
            Protocol: HTTP

    CodeDeployDeploymentGroup:
        Type: AWS::CodeDeploy::DeploymentGroup
        Properties:
            DeploymentGroupName: !Ref EnvironmentName
            DeploymentConfigName: !Ref DeploymentStrategy
            ServiceRoleArn: 
                Fn::ImportValue:
                    !Sub CodeDeployServiceRoleArn-${ApplicationName}
            ApplicationName: 
                Fn::ImportValue:
                    !Sub CodeDeployApplication-${ApplicationName} 
            AutoScalingGroups:
                - !Ref AutoScalingGroup
        
    ApplicationSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            VpcId: !Ref VPC
            GroupDescription: Controls who can access the application servers
            SecurityGroupIngress:
                # Only allow in bound from the load balancer
                - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup 
                  IpProtocol: -1
            Tags: 
                - Key: Name
                  Value: !Sub ${ApplicationName}-${EnvironmentName}-ApplicationServers

    LoadBalancerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            VpcId: !Ref VPC
            GroupDescription: Controls who can access the load balancer
            SecurityGroupIngress:
                # Allow access from anywhere
                - CidrIp: 0.0.0.0/0
                  IpProtocol: -1
            Tags: 
                - Key: Name
                  Value: !Sub ${ApplicationName}-${EnvironmentName}-LoadBalancers

    InstanceRole:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${ApplicationName}-${EnvironmentName}-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": { 
                            "Service": "ec2.amazonaws.com" 
                        }
                    }]
                }
            Policies: 
                - PolicyName: !Sub ${ApplicationName}-${EnvironmentName}-${AWS::Region}
                  PolicyDocument: !Sub |
                    {
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "s3:Get*"
                            ],
                            "Resource": [ "arn:aws:s3:::${ArtifactS3Bucket}/${ApplicationName}/*" ]
                        }]
                    }

    InstanceProfile: 
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles: 
                - !Ref InstanceRole
    
    VPC: 
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            Tags: 
                - Key: Name 
                  Value: !Sub ${ApplicationName}-${EnvironmentName}
            
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Sub $!Sub ${ApplicationName}-${EnvironmentName}
            
    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    PublicSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs ]
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${ApplicationName} ${EnvironmentName} Public Subnet (AZ1)

    PublicSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs ]
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${ApplicationName} ${EnvironmentName} Public Subnet (AZ2)

    PublicSubnet3: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs ]
            CidrBlock: !Ref PublicSubnet3CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${ApplicationName} ${EnvironmentName} Public Subnet (AZ3)

    PrivateSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs ]
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${ApplicationName} ${EnvironmentName} Private Subnet (AZ1)

    PrivateSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs ]
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${ApplicationName} ${EnvironmentName} Private Subnet (AZ2)

    PrivateSubnet3: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs ]
            CidrBlock: !Ref PrivateSubnet3CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${ApplicationName} ${EnvironmentName} Private Subnet (AZ3)

    NatGateway1EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties: 
            Domain: vpc

    NatGateway2EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGateway3EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGateway1: 
        Type: AWS::EC2::NatGateway
        Properties: 
            AllocationId: !GetAtt NatGateway1EIP.AllocationId
            SubnetId: !Ref PublicSubnet1

    NatGateway2: 
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway2EIP.AllocationId
            SubnetId: !Ref PublicSubnet2

    NatGateway3: 
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway3EIP.AllocationId
            SubnetId: !Ref PublicSubnet2

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${ApplicationName} ${EnvironmentName} Public Routes

    DefaultPublicRoute: 
        Type: AWS::EC2::Route
        Properties: 
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2
    
    PublicSubnet3RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet3

    PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${ApplicationName} ${EnvironmentName} Private Routes (AZ1)

    DefaultPrivateRoute1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway1

    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1

    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${ApplicationName} ${EnvironmentName} Private Routes (AZ2)

    DefaultPrivateRoute2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway2

    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2

    PrivateRouteTable3:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${ApplicationName} ${EnvironmentName} Private Routes (AZ3)

    DefaultPrivateRoute3:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable3
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway2

    PrivateSubnet3RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable3
            SubnetId: !Ref PrivateSubnet3

Outputs: 

    WebsiteURL: 
        Description: Website URL
        Value: !Sub http://${LoadBalancer.DNSName}